import java.util.*;

public class WeakestRows {
    public static void main(String[] args) {
        int[][] mat1 = {
            {1,1,0,0,0},
            {1,1,1,1,0},
            {1,0,0,0,0},
            {1,1,0,0,0},
            {1,1,1,1,1}
        };
        int k1 = 3;
        System.out.println(Arrays.toString(kWeakestRows(mat1, k1)));

        int[][] mat2 = {
            {1, 0, 0, 0},
            {1, 1, 1,1},
            {1, 0, 0, 0},
            {1, 0, 0,0}
        };
        int k2 = 2;
        System.out.println(Arrays.toString(kWeakestRows(mat2, k2)));
    }

    public static int[] kWeakestRows(int[][] mat, int k) {
        PriorityQueue<int[]> heap = new PriorityQueue<>((a, b) ->
            a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);

        for (int i = 0; i < mat.length; i++) {
            int count = 0;
            for (int j = 0; j < mat[0].length; j++) {
                if (mat[i][j] == 1) {
                    count++;
                } else {
                    break;
                }
            }
            heap.offer(new int[]{count, i});
        }

        int[] result = new int[k];
        for (int i = 0; i < k; i++) {
            result[i] = heap.poll()[1];
        }
        return result;
    }
}
